/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.chetan;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author cheta
 */
public class MainUI extends javax.swing.JFrame {

    /**
     * Creates new form MainUI
     */
    public MainUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton_ShowIndex = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton_ShowTF = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButton_ShowIDF = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton_ShowTFIDF = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jButton_CosSimIndocs = new javax.swing.JButton();
        jButton_SaveIndexToDisk = new javax.swing.JButton();
        jButton_DeleteIndex = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jTextField_Query = new javax.swing.JTextField();
        jButton_Search = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList2_DocID = new javax.swing.JList();
        jLabel8 = new javax.swing.JLabel();
        crawler_status = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        indexer_status = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Few Steps"));

        jLabel1.setText("Step 1: ");

        jButton_ShowIndex.setText("Show Index");
        jButton_ShowIndex.setEnabled(false);
        jButton_ShowIndex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ShowIndexActionPerformed(evt);
            }
        });

        jLabel2.setText("Step 2: ");

        jButton_ShowTF.setText("Show TF");
        jButton_ShowTF.setEnabled(false);
        jButton_ShowTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ShowTFActionPerformed(evt);
            }
        });

        jLabel3.setText("Step 3: ");

        jButton_ShowIDF.setText("Show IDF");
        jButton_ShowIDF.setEnabled(false);
        jButton_ShowIDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ShowIDFActionPerformed(evt);
            }
        });

        jLabel4.setText("Step 4: ");

        jButton_ShowTFIDF.setText("Show TFIDF");
        jButton_ShowTFIDF.setEnabled(false);
        jButton_ShowTFIDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ShowTFIDFActionPerformed(evt);
            }
        });

        jLabel5.setText("Step 5: ");

        jButton_CosSimIndocs.setText("Show Cosine Similarity b/w Docs");
        jButton_CosSimIndocs.setEnabled(false);
        jButton_CosSimIndocs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CosSimIndocsActionPerformed(evt);
            }
        });

        jButton_SaveIndexToDisk.setText("Save Index To Disk");
        jButton_SaveIndexToDisk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_SaveIndexToDiskActionPerformed(evt);
            }
        });

        jButton_DeleteIndex.setText("Delete Index From Disk");
        jButton_DeleteIndex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_DeleteIndexActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton_ShowTF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton_ShowIDF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton_ShowTFIDF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton_ShowIndex, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton_CosSimIndocs)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jButton_DeleteIndex, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton_SaveIndexToDisk, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton_ShowIndex))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_ShowTF)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jButton_ShowIDF))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jButton_ShowTFIDF))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jButton_CosSimIndocs))
                .addGap(32, 32, 32)
                .addComponent(jButton_SaveIndexToDisk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton_DeleteIndex)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Output Window"));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Query"));

        jLabel6.setText("Enter Your Query Here: ");

        jTextField_Query.setText("hall van");

        jButton_Search.setText("Search");
        jButton_Search.setEnabled(false);
        jButton_Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_SearchActionPerformed(evt);
            }
        });

        jLabel7.setText("Top Documents Matching Your Query With Their Cosine Similarity");

        jList1.setBorder(javax.swing.BorderFactory.createTitledBorder("Term : Cosine Similarity"));
        jList1.setCellRenderer(new JListUI_Improvent.AddLineBetweenItems());
        jScrollPane1.setViewportView(jList1);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 20, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jTextField_Query, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton_Search))
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField_Query, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_Search))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Document Corpus"));

        jList2_DocID.setBorder(javax.swing.BorderFactory.createTitledBorder("Document IDs"));
        jList2_DocID.setCellRenderer(new JListUI_Improvent.AddLineBetweenItems());
        jScrollPane3.setViewportView(jList2_DocID);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
        );

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel8.setText("Crawler Status:");

        crawler_status.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        crawler_status.setText("Running");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel9.setText("Indexer Status: ");

        indexer_status.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        indexer_status.setText("Running... Please wait");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(crawler_status, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(85, 85, 85)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(indexer_status)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(crawler_status)
                    .addComponent(jLabel9)
                    .addComponent(indexer_status))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_SearchActionPerformed
        // TODO add your handling code here:
        String query = jTextField_Query.getText();
        if (query.length() < 2) {
            System.out.println("length: " + query.length());
            JOptionPane.showMessageDialog(rootPane, "Please add more terms to query to make search effective", "Insufficient Terms To Search", JOptionPane.ERROR_MESSAGE);
        } else {
            FindDocsContainingQuery(query);
            RemoveRedundantData redundantData = new RemoveRedundantData();
            FrequencyCounter frequencyCounter = new FrequencyCounter();
            List<DocsRelevantToQuery> queryDocsMatching = frequencyCounter.calculateQueryTFIDFAndCosSim(redundantData.NormalizeQuery(query));
            DefaultListModel dlm = new DefaultListModel();
            for (DocsRelevantToQuery docsRelevantToQuery : queryDocsMatching) {
                dlm.addElement(docsRelevantToQuery);
            }
            jList1.setModel(dlm);
        }
    }//GEN-LAST:event_jButton_SearchActionPerformed

    private void jButton_ShowIndexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ShowIndexActionPerformed
        // TODO add your handling code here:
        System.out.println("\n\n ---------------------------------------- MAIN INDEX----------------------------------------- ");
        HashMap<String, String> mainindex = DataHolder.mainIndex;
        for (Map.Entry<String, String> entry : mainindex.entrySet()) {
            String key = entry.getKey();
            String value = entry.getValue();
            System.out.println("Term: " + key + "      Docs: " + value);
        }

    }//GEN-LAST:event_jButton_ShowIndexActionPerformed

    private void jButton_ShowTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ShowTFActionPerformed

        //get the selected eleement from the jlist2
        int indexSel = jList2_DocID.getSelectedIndex();
        List<HashMap<String, Double>> tfOfDocuments = DataHolder.tfOfDocuments;
        if (indexSel != -1) {
            System.out.println("\n\n ---------------------------------------- TF Values Of Document ----------------------------------------- ");
            String id = DataHolder.docIDList.get(indexSel);
            HashMap<String, Double> tempHashMap = tfOfDocuments.get(indexSel);
            for (Map.Entry<String, Double> entry : tempHashMap.entrySet()) {
                String key = entry.getKey();
                Double value = entry.getValue();
                System.out.println("Term: " + key + "\t     Frequency:  " + value);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Please select a document from Document Repository ");
        }


    }//GEN-LAST:event_jButton_ShowTFActionPerformed

    private void jButton_ShowIDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ShowIDFActionPerformed
        // TODO add your handling code here:
        System.out.println("\n\n ---------------------------------------- IDF Values ----------------------------------------- ");
        HashMap<String, Double> idfHashMap = DataHolder.idfHashMap;
        for (Map.Entry<String, Double> entry : idfHashMap.entrySet()) {
            String key = entry.getKey();
            Double value = entry.getValue();
            System.out.println("Term: " + key + "\t   IDF:  " + value);
        }

    }//GEN-LAST:event_jButton_ShowIDFActionPerformed

    private void jButton_ShowTFIDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ShowTFIDFActionPerformed
        //get the selected eleement from the jlist2
        int indexSel = jList2_DocID.getSelectedIndex();
        List<HashMap<String, Double>> idfValList = DataHolder.tfidfValList;
        if (indexSel != -1) {
            System.out.println("\n\n ---------------------------------------- TFIDF Values Of Document ----------------------------------------- ");
            HashMap<String, Double> tempHashMap = idfValList.get(indexSel);
            for (Map.Entry<String, Double> entry : tempHashMap.entrySet()) {
                String key = entry.getKey();
                Double value = entry.getValue();
                System.out.println("Term:  " + key + "\t   TFIDF:  " + value);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Please select a document from Document Repository ");
        }
    }//GEN-LAST:event_jButton_ShowTFIDFActionPerformed

    private void jButton_CosSimIndocsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_CosSimIndocsActionPerformed
        System.out.println("\n\n ---------------------------------------- Cosine Similarity Between Documents ----------------------------------------- ");
        FrequencyCounter frequencyCounter = new FrequencyCounter();
        frequencyCounter.calculateCosineSim();

    }//GEN-LAST:event_jButton_CosSimIndocsActionPerformed

    private void jButton_SaveIndexToDiskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_SaveIndexToDiskActionPerformed
        ObjectOutputStream oos = null;
        try {
            // TODO add your handling code here:
            FileOutputStream fos = new FileOutputStream("Index.dat");
            oos = new ObjectOutputStream(fos);
            List<String> allTerms = DataHolder.allTerms;
            oos.writeObject(allTerms);
            oos.writeObject((DataHolder.mainIndex));
            oos.writeObject((DataHolder.documentDatas));
            oos.writeObject((DataHolder.termsDocsArray));
            oos.writeObject((DataHolder.docIDList));
            oos.writeObject((DataHolder.tfOfDocuments));
            oos.writeObject((DataHolder.idfHashMap));
            oos.writeObject((DataHolder.tfidfValList));
            oos.writeObject((DataHolder.tfidfVectors));
            oos.close();
            fos.close();
            JOptionPane.showMessageDialog(rootPane, "Index succesfully saved to disk.");
        } catch (IOException ex) {
            Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Unable to save index");
        } finally {
            try {
                oos.close();
            } catch (IOException ex) {
                Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton_SaveIndexToDiskActionPerformed

    private void jButton_DeleteIndexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_DeleteIndexActionPerformed
        // TODO add your handling code here:

        File f = new File("Index.dat");
        if (f.exists()) {
            try {
                if (f.delete()) {
                    JOptionPane.showMessageDialog(rootPane, "Index Deleted");
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Problem in deleting the Index. please contact developer");
                }
            } catch (Exception e) {
                System.out.println("Excpetion " + e);
            }
        }
        {

        }
    }//GEN-LAST:event_jButton_DeleteIndexActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    System.out.println("setting theme windows");

                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
//                else if("Nimbus".equals(info.getName()))
//                  {
//                      System.out.println("Setting theme "+info.getName());
//                      
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainUI().setVisible(true);
            }
        });
        try {
            Thread.sleep(1000);
        } catch (InterruptedException ex) {
            Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        MessageConsole mc = new MessageConsole(jTextArea1, true);
        mc.redirectOut();
        //read old state if available
        readObjectsFromFile();

//        DataHolder.docIDList
        DefaultListModel dlm = new DefaultListModel();
        DataHolder.docIDList.stream().forEach((id) -> {
            dlm.addElement(id);
        });
        jList2_DocID.setModel(dlm);
        MainUI.crawler_status.setText("Completed");
        MainUI.indexer_status.setText("Completed");
        MainUI.jButton_CosSimIndocs.setEnabled(true);
        MainUI.jButton_Search.setEnabled(true);
        MainUI.jButton_ShowIDF.setEnabled(true);
        MainUI.jButton_ShowIndex.setEnabled(true);
        MainUI.jButton_ShowTF.setEnabled(true);
        MainUI.jButton_ShowTFIDF.setEnabled(true);
    }

    /**
     * Method that will query the index to find the relevant docs .
     *
     * @param query
     * @return
     */
    private static String FindDocsContainingQuery(String query) {
        Set<String> tokenToIndex = NormalizeQuery(query);
        //search for these tokens in the indexer
        StringBuilder queryResult = new StringBuilder();
        for (String string : tokenToIndex) {
            if (DataHolder.mainIndex.containsKey(string)) {
                queryResult.append(DataHolder.mainIndex.get(string) + ",");
            }

        }
        if (queryResult.toString().length() > 1) {
            //JOptionPane.showMessageDialog(null, "The query ( " + query+ " )" + "was found in documents: "+formatQueryResult(queryResult.toString()));
            System.out.println("Docs containing these query terms: " + formatQueryResult(queryResult.toString()));
        } else {
            //JOptionPane.showMessageDialog(null, "The query ( " + query+ " )" + "was not found in any documents: ");
            System.out.println("Query Terms Not Found In index");
        }
        return formatQueryResult(queryResult.toString());
    }

    /**
     * Method to normalize the input query, remove stop words etc
     *
     * @param query
     * @return
     */
    public static Set<String> NormalizeQuery(String query) {
        //find the documents where the query term appears
        RemoveRedundantData removeRedundantData = new RemoveRedundantData();
        String redRemoved = removeRedundantData.removeRedundantData(query);
        //convert it into tokens
        String[] tokens = redRemoved.split("\\s");
        //remove stop words
        Set<String> tokenToIndex = removeRedundantData.RemoveStopWords(Arrays.asList(tokens));
        return tokenToIndex;
    }

    //to avoid repeating display of docs
    static String formatQueryResult(String s) {
        String[] sTemp = s.split(",");
        Set<String> queryResultSet = new HashSet<>();
        for (String string : sTemp) {
            queryResultSet.add(string);
        }
        return Arrays.toString(queryResultSet.toArray(new String[0]));
    }

    /**
     * Method to save data to disk
     */
    static void readObjectsFromFile() {
        File file = new File("Index.dat");
        
        if (file.exists())//if file is there read the object states
        {
            System.out.println("File Size: "+file.length());
           
            JOptionPane.showMessageDialog(jTextArea1, "Rebuilding Index using the saved state");
            try {
                ObjectInputStream ois = new ObjectInputStream(new FileInputStream(file));
                DataHolder.allTerms = (List<String>) ois.readObject();
                DataHolder.mainIndex = (HashMap<String, String>) ois.readObject();
                DataHolder.documentDatas = (List<DocumentData>) ois.readObject();
                DataHolder.termsDocsArray = (List<String[]>) ois.readObject();
                DataHolder.docIDList = (List<String>) ois.readObject();
                DataHolder.tfOfDocuments = (List<HashMap<String, Double>>) ois.readObject();
                DataHolder.idfHashMap = (HashMap<String, Double>) ois.readObject();
                DataHolder.tfidfValList = (List<HashMap<String, Double>>) ois.readObject();
                DataHolder.tfidfVectors = (List<double[]>) ois.readObject();
                ois.close();

            } catch (IOException ex) {
                Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            CrawlerAndIndexer xmlr = new CrawlerAndIndexer();
            xmlr.ReadFile();//creates index 
            //calculate term Frequency
            FrequencyCounter frequencyCounter = new FrequencyCounter();
            frequencyCounter.calculateTermFrequencies();
            frequencyCounter.calculateIDF();
            frequencyCounter.calculateTFIDF();
            frequencyCounter.generateTFIDFVectors();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JLabel crawler_status;
    public static javax.swing.JLabel indexer_status;
    public static javax.swing.JButton jButton_CosSimIndocs;
    private javax.swing.JButton jButton_DeleteIndex;
    private javax.swing.JButton jButton_SaveIndexToDisk;
    public static javax.swing.JButton jButton_Search;
    public static javax.swing.JButton jButton_ShowIDF;
    public static javax.swing.JButton jButton_ShowIndex;
    public static javax.swing.JButton jButton_ShowTF;
    public static javax.swing.JButton jButton_ShowTFIDF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    public static javax.swing.JList jList1;
    public static javax.swing.JList jList2_DocID;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    public static javax.swing.JTextArea jTextArea1;
    public static javax.swing.JTextField jTextField_Query;
    // End of variables declaration//GEN-END:variables
}
